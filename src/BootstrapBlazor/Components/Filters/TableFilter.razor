@namespace BootstrapBlazor.Components
@inherits BootstrapModuleComponentBase
@attribute [BootstrapModuleAutoLoader("Filters/TableFilter.razor.js")]

@if (IsHeaderRow)
{
    @RenderFilter(Column)
}
else
{
    <span @attributes="@AdditionalAttributes" id="@Id" class="@ClassString" data-bb-dismiss=".filter-dismiss">
        <i class="@FilterClassString" data-bs-placement="bottom" data-bs-auto-close="outside" data-bs-toggle="bb.dropdown" data-bs-custom-class="shadow">
        </i>
        @RenderFilter(Column)
    </span>
}

@code {
    RenderFragment<ITableColumn> RenderFilter => Column =>
    @<CascadingValue Value="this" IsFixed="true">
        @if (Column.FilterTemplate != null)
        {
            @Column.FilterTemplate
        }
        else
        {
            @if (Column.PropertyType.IsEnum())
            {
                <TableColumnFilter Filter="@typeof(EnumFilter)" ShowMoreButton="true"></TableColumnFilter>
            }
            else if (Column.IsLookup())
            {
                <TableColumnFilter Filter="@typeof(LookupFilter)"></TableColumnFilter>
            }
            else
            {
                var fieldType = Nullable.GetUnderlyingType(Column.PropertyType) ?? Column.PropertyType;
                switch (fieldType.Name)
                {
                    case nameof(String):
                        <TableColumnFilter Filter="@typeof(StringFilter)" ShowMoreButton="true"></TableColumnFilter>
                        break;
                    case nameof(Boolean):
                        <TableColumnFilter Filter="@typeof(BoolFilter)"></TableColumnFilter>
                        break;
                    case nameof(DateTime):
                        <TableColumnFilter Filter="@typeof(DateTimeFilter)" ShowMoreButton="true"></TableColumnFilter>
                        break;
                    case nameof(Int16):
                        <TableColumnFilter Filter="@typeof(NumberFilter<Int16?>)" ShowMoreButton="true"></TableColumnFilter>
                        break;
                    case nameof(Int32):
                        <TableColumnFilter Filter="@typeof(NumberFilter<Int32?>)" ShowMoreButton="true"></TableColumnFilter>
                        break;
                    case nameof(Int64):
                        <TableColumnFilter Filter="@typeof(NumberFilter<Int64?>)" ShowMoreButton="true"></TableColumnFilter>
                        break;
                    case nameof(Single):
                        <TableColumnFilter Filter="@typeof(NumberFilter<Single?>)" ShowMoreButton="true"></TableColumnFilter>
                        break;
                    case nameof(Double):
                        <TableColumnFilter Filter="@typeof(NumberFilter<Double?>)" ShowMoreButton="true"></TableColumnFilter>
                        break;
                    case nameof(Decimal):
                        <TableColumnFilter Filter="@typeof(NumberFilter<Decimal?>)" ShowMoreButton="true"></TableColumnFilter>
                        break;
                    default:
                        <div>@NotSupportedMessage</div>
                        break;
                };
            }
        }
    </CascadingValue>;
}
