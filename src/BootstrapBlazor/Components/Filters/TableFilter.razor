@namespace BootstrapBlazor.Components
@inherits BootstrapModuleComponentBase
@attribute [BootstrapModuleAutoLoader("Filters/TableFilter.razor.js")]

@if (IsHeaderRow)
{
    @if (Column.FilterTemplate != null)
    {
        @Column.FilterTemplate
    }
    else
    {
        @RenderFilter(Column)
    }
}
else
{
    <span @attributes="@AdditionalAttributes" id="@Id" class="@ClassString" data-bb-dismiss=".filter-dismiss">
        <i class="@FilterClassString" data-bs-placement="bottom" data-bs-auto-close="outside" data-bs-toggle="bb.dropdown" data-bs-custom-class="shadow">
        </i>
        <div class="card filter-item">
            @if(Column.FilterTemplate != null)
            {
                @Column.FilterTemplate
            }
            else
            {
                @RenderFilter(Column)
            }
        </div>
    </span>
}

@code {
    RenderFragment<ITableColumn> RenderFilter => Column =>
    @<CascadingValue Value="this" IsFixed="true">
        @if (Column.PropertyType.IsEnum())
        {
            <TableColumnEnumFilter></TableColumnEnumFilter>
        }
        else if (Column.IsLookup())
        {

        }
        else
        {
            var fieldType = Nullable.GetUnderlyingType(Column.PropertyType) ?? Column.PropertyType;
            switch (fieldType.Name)
            {
                case nameof(Boolean):
                    <TableColumnBoolFilter></TableColumnBoolFilter>
                    break;
                case nameof(DateTime):
                    <TableColumnDateTimeFilter></TableColumnDateTimeFilter>
                    break;
                case nameof(Int16):
                    <NumberFilter TType="Int16?"></NumberFilter>
                    break;
                case nameof(Int32):
                    <TableColumnNumberFilter TType="Int32?"></TableColumnNumberFilter>
                    break;
                case nameof(Int64):
                    <TableColumnNumberFilter TType="Int64?"></TableColumnNumberFilter>
                    break;
                case nameof(Single):
                    <TableColumnNumberFilter TType="Single?"></TableColumnNumberFilter>
                    break;
                case nameof(Double):
                    <TableColumnNumberFilter TType="Double?"></TableColumnNumberFilter>
                    break;
                case nameof(Decimal):
                    <TableColumnNumberFilter TType="Decimal?"></TableColumnNumberFilter>
                    break;
                case nameof(String):
                    <TableColumnStringFilter></TableColumnStringFilter>
                    break;
                default:
                    <div>@NotSupportedMessage</div>
                    break;
            };
        }
    </CascadingValue>;
}
