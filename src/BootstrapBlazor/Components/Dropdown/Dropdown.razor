@namespace BootstrapBlazor.Components
@typeparam TValue
@inherits PopoverSelectBase<TValue>
@attribute [BootstrapModuleAutoLoader("Dropdown/Dropdown.razor.js", JSObjectReference = true)]

@if (IsShowLabel)
{
    <BootstrapLabel for="@Id" ShowLabelTooltip="ShowLabelTooltip" Value="@DisplayText"></BootstrapLabel>
}
<div @attributes="@AdditionalAttributes" id="@Id" class="@DirectionClassName">
    <DynamicElement TagName="button" type="button" class="@ButtonClassName" data-bs-toggle="@DropdownToggle" disabled="@Disabled"
                    TriggerClick="ShowSplit" OnClick="OnClickButton" PreventDefault="false" StopPropagation="false">
        @if (ButtonTemplate == null)
        {
            @if (_isAsyncLoading)
            {
                <i class="@LoadingIcon"></i>
            }
            else if (!string.IsNullOrEmpty(Icon))
            {
                <i class="@Icon"></i>
            }
            <span>@ButtonText</span>
        }
        else
        {
            @ButtonTemplate(SelectedItem)
        }
    </DynamicElement>
    @if (ShowSplit)
    {
        <button type="button" class="@ClassName" data-bs-toggle="@ToggleString" disabled="@Disabled"
                aria-haspopup="true"
                aria-expanded="false">
        </button>
    }
    <div class="@MenuAlignmentClass">
        @if (ItemsTemplate == null)
        {
            @foreach (var item in GetItems())
            {
                if (ItemTemplate != null)
                {
                    <div class="@ActiveItem(item)">
                        @ItemTemplate(item)
                    </div>
                }
                else if (item.IsDisabled)
                {
                    <div class="@ActiveItem(item)">@item.Text</div>
                }
                else
                {
                    <div class="@ActiveItem(item)" @onclick="e => OnItemClick(item)">@item.Text</div>
                }
            }
        }
        else
        {
			<CascadingValue Value="_items" IsFixed="true">
				@ItemsTemplate
			</CascadingValue>
			<RenderTemplate>
				@foreach(var item in _items)
				{
                    switch (item)
                    {
                        case DropdownDivider:
                            <Divider></Divider>
                            break;
                        case DropdownItem t:
                        {
                            var disabled = GetItemTriggerClick(t);
                            if (t.ChildContent != null)
                            {
                                <div class="@GetItemClassString(disabled)">
                                    @t.ChildContent
                                </div>
                            }
                            else
                            {
                                <DynamicElement @key="t" class="@GetItemClassString(disabled)"
                                                TriggerClick="!disabled" OnClick="() => OnClickItem(t)">
                                    <i class="@GetItemIconString(t)"></i>
                                    <span>@t.Text</span>
                                </DynamicElement>
                            }

                            break;
                        }
                        default:
                            <DynamicComponent Type="item.GetType()"></DynamicComponent>
                            break;
                    }
                }
			</RenderTemplate>
		}
    </div>
</div>
