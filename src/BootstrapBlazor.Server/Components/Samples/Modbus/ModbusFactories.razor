@page "/modbus-factory"
@inject IStringLocalizer<ModbusFactories> Localizer

<h3>Modbus 串行通讯服务 <code>IModbusFactory</code></h3>
<h4>组件库内置了 Modbus 串行通讯服务</h4>

<PackageTips Name="Longbow.Modbus" />

<p class="code-label">1. 服务注入</p>

<Pre>services.AddModbusFactory();</Pre>

<p class="code-label">2. 使用服务</p>
<p>调用 <code>ModbusFactory</code> 实例方法 <code>GetOrCreateTcpMaster</code> 即可得到一个 <code>IModbusClient</code> 实例。内部提供复用机制，调用两次得到的 <code>IModbusClient</code> 为同一对象</p>

<Pre>[Inject]
[NotNull]
private IModbusFactory? ModbusFactory { get; set; }</Pre>

<p class="code-label">3. 通过工厂获得相对应协议 <code>IModbusClient</code> 实例</p>

<p><code>IModbusClient</code> 有两个派生类</p>

<ul class="ul-demo">
	<li><code>Socket</code> 通讯协议 <code>Tcp/Udp</code> 使用 <code>IModbusTcpClient</code></li>
	<li><code>SerialPort</code> 通讯协议 <code>RTU</code> 使用 <code>IModbusRtuClient</code></li>
</ul>

<p>Modbus 可以通过不同的物理介质传输，主要有以下几种方式：</p>

<ul class="ul-demo">
    <li><code>Modbus RTU (Remote Terminal Unit)</code>: 采用二进制编码，使用紧凑的二进制表示数据，效率高，是最常用的串行通信模式。通常基于 <code>RS-485</code>（支持多设备）或 <code>RS-232</code>（点对点）物理层，CRC 校验确保数据完整性。</li>
    <li><code>Modbus TCP/IP</code>: 运行于以太网上，使用 <code>TCP/IP</code> 协议，默认端口 <code>502</code>。它在 Modbus RTU 协议基础上添加了 MBAP 报文头，并由于TCP本身是可靠连接的服务，因此去掉了 CRC 校验码。</li>
</ul>

<p><code>IModbusFactory</code> 实例方法</p>

<ul class="ul-demo">
    <li>通过 <code>GetOrCreateTcpMaster</code> 方法得到 <code>IModbusTcpClient</code> 实例</li>
    <li>通过 <code>GetOrCreateUdpMaster</code> 方法得到 <code>IModbusTcpClient</code> 实例</li>
	<li>通过 <code>GetOrCreateRtuMaster</code> 方法得到 <code>IModbusRtuClient</code> 实例</li>
	<li>通过 <code>GetOrCreateRtuOverTcpMaster</code> 方法得到 <code>IModbusTcpClient</code> 实例</li>
	<li>通过 <code>GetOrCreateRtuOverUdpMaster</code> 方法得到 <code>IModbusTcpClient</code> 实例</li>
</ul>

<p>调用其对应的 <code>Remove</code> 方法即可从缓存中移除指定名称的 <code>IModbusClient</code> 实例。如</p>

<Pre>ModbusFactory.RemoveTcpMaster("test");</Pre>

<p class="code-label">4. 数据操作</p>

<p><code>Modbus</code> 数据类型共四种</p>

<ul class="ul-demo">
	<li>线圈 (Coils) 可读可写 数字量输出，如开关状态</li>
	<li>离散输入 (Discrete Inputs) 只读 数字量输出，如开关状态</li>
	<li>输入寄存器 (Input Registers) 只读 模拟量输入，如温度、压力传感器数据</li>
	<li>保持寄存器 (Holding Registers) 可读可写 模拟量输出，如设定值、控制参数</li>
</ul>

<p>对应 <code>IModbusClient</code> 实例方法如下</p>

<ul class="ul-demo">
    <li>线圈 (Coils) <code>ReadCoilsAsync</code> <code>WriteCoilAsync</code> <code>WriteMultipleCoilsAsync</code></li>
    <li>离散输入 (Discrete Inputs) <code>ReadInputsAsync</code></li>
    <li>输入寄存器 (Input Registers) <code>ReadInputRegistersAsync</code></li>
    <li>保持寄存器 (Holding Registers) <code>ReadHoldingRegistersAsync</code> <code>WriteRegisterAsync</code> <code>WriteMultipleRegistersAsync</code></li>
</ul>
