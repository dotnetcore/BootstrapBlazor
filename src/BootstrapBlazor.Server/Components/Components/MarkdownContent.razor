@using Markdig
@using Markdown.ColorCode
@using ColorCode.Styling
@using System.Text.RegularExpressions
@using ColorCode
@using ColorCode.Compilation.Languages
@using Markdown = Markdig.Markdown
@inherits ComponentBase

<div id="@(Id ?? string.Empty)">
    @((MarkupString)(AsMarkdown ?? string.Empty))
</div>

<style>
    .think {
        margin-bottom: 0;
        font-size: 16px;
        font-weight: 400;
        color: #A0A0A0;
        border-left: 3px solid #dfdbdb;
        padding-left: 10px;
    }
</style>

@code {
    [Parameter]
    public required string Content { get; set; }

    [Parameter]
    public string? Id { get; set; }

    public string? AsMarkdown;

    string? Embedding { get; set; }

    protected override void OnInitialized()
    {
        markdownPipeline = new MarkdownPipelineBuilder()
            .UsePipeTables()
            .UseAdvancedExtensions()
            .UseColorCode(styleDictionary: StyleDictionary.DefaultLight,
                additionalLanguages: new List<ILanguage>()
                        {
                    new Json(),
                    new CSharp(),
                    new Cpp(),
                    new Css(),
                    new Html(),
                    new JavaScript(),
                    new Php(),
                        })
            .UseAutoLinks()
            .UseEmojiAndSmiley()
            .UseMediaLinks()
            .UseCitations()
            .UseMathematics()
            .UseAutoLinks()
            .UseDiagrams()
            .Build();
    }

    protected override void OnParametersSet()
    {
        var embeddingsRemoved = RemoveEmbeddingsElement(Content);
        AsMarkdown = GetMarkdown(embeddingsRemoved);
        StateHasChanged();
    }

    private MarkdownPipeline? markdownPipeline;

    private string GetMarkdown(string toHtml)
    {
        try
        {
            if (string.IsNullOrEmpty(toHtml))
                return string.Empty;

            // 处理未封闭的 think 标签
            toHtml = HandleUnclosedThinkTags(toHtml);

            // 处理正常的 think 标签
            var thinkPattern = @"<\s*think\b[^>]*>(.*?)<\s*/\s*think\s*>";
            toHtml = Regex.Replace(toHtml, thinkPattern, @"<div class=""think"">$1</div>", RegexOptions.Singleline | RegexOptions.IgnoreCase);
            toHtml = RemoveEmbeddingsElement(toHtml);

            var html = Markdown.ToHtml(toHtml, markdownPipeline);

            var pattern = "(<div style=\"color:#DADADA;background-color:#1E1E1E;\"><pre>(.*?)</pre></div>)";
            var matches = Regex.Matches(html, pattern, RegexOptions.Singleline | RegexOptions.Multiline | RegexOptions.IgnoreCase);

            for (var i = matches.Count - 1; i >= 0; i--)
            {
                var match = matches[i].ToString();
                var id = "copy" + i;
                var replacement = $"<button data-clipboard-target=\"#{id}\" class=\"float-end copyBtn  mt-0\">Copy</button>" + match;
                html = html.Remove(matches[i].Index, matches[i].Length).Insert(matches[i].Index, replacement);
            }

            return html;
        }
        catch (Exception)
        {
            return "error markdowncontent.razor";
        }
    }

    private string HandleUnclosedThinkTags(string content)
    {
        if (string.IsNullOrEmpty(content))
            return content;

        // 匹配开始标签
        var openTagPattern = @"<\s*think\b[^>]*>";
        var closeTagPattern = @"<\s*/\s*think\s*>";

        var openTags = Regex.Matches(content, openTagPattern);
        var closeTags = Regex.Matches(content, closeTagPattern);

        // 如果开始标签数量等于结束标签数量，说明标签都是配对的
        if (openTags.Count == closeTags.Count)
            return content;

        // 处理未封闭的标签
        var parts = Regex.Split(content, openTagPattern);
        if (parts.Length <= 1)
            return content;

        var result = parts[0]; // 保留第一部分的内容
        for (int i = 1; i < parts.Length; i++)
        {
            var part = parts[i];
            // 检查这部分是否已经包含结束标签
            if (!part.Contains("</think>", StringComparison.OrdinalIgnoreCase))
            {
                // 没有结束标签，添加一个完整的 think 标签包装
                result += $"<think>{part}</think>";
            }
            else
            {
                // 已经有结束标签，保持原样
                result += $"<think>{part}";
            }
        }

        return result;
    }

    private string RemoveEmbeddingsElement(string data)
    {
        if (string.IsNullOrEmpty(data))
        {
            return "";
        }
        string pattern = @"\[EMBEDDINGS\](.*?)\[/EMBEDDINGS\]";
        var matches = Regex.Matches(data, pattern, RegexOptions.Multiline | RegexOptions.Singleline | RegexOptions.IgnoreCase);

        if (matches.Count == 0)
        {
            return data;
        }

        data = Regex.Replace(data, pattern, "", RegexOptions.Multiline | RegexOptions.Singleline | RegexOptions.IgnoreCase);

        Embedding = $"{matches[0].Groups[1].Value}";
        return data;
    }
}
